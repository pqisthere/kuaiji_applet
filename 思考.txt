1.
①左滑出现重命名、删除按钮
  transform: translateX(140px);
  /* 元素本身的位置不变，但内容区域向右移动了140px */
  触发滑动事件后
  transform: translateX(0);
  再配合动画效果，看起来就像是左滑出现按钮
  bug，不脱标，它原本位置仍然存在

②修复了点击内容的区域，之前只能点击文字的地方，右边被占据的按钮的位置无法点击，文字和边框之间的padding不可点击。
只需将可点击区域 content 放在 navigator 的 class 里，再将按钮放在 navigator 里即可，bug，此时按钮将不再和一条条的数据左右排列，而是会在一条条数据的下面

修复bug：
设置子绝父相，子元素设置不同的right（如果right相同，后者会覆盖前者）
/* 子元素绝对定位 */
position: absolute;
/* 位于父元素的最右侧 */
right: 0;

2.
未解之谜：我想让消费日期显示格式为03-31，即去除年份
但是很奇怪，我使用三种方法
①直接在提交表单的时候，就把日期阉割成只有月份和日期，没有年份的，结果最终显示的还是有年份（这种方法我也不建议，因为要根据年月日比较来排序）
②在wxml里阉割，结果是所有，年份，月份和日期都不见了
③设置displayDate，提交完整日期，显示时只显示月份和日期，但是结果还是所有全部消失

3.
两个index都涉及遍历列表数据的操作，此时 wx:for="{{list}}" wx:key="index"，wx:key的值不能相同，否则警告

4.
bug，修改了setting的消费类型，detail里的并不会实时更新
修复：
原来是onLoad和onShow的问题！！
onLoad只会在第一次进入该页面时加载，此后不会加载
onShow在每次进入页面后都会重新加载
要想让修改后的值实时更新，一定要加onShow

bug，左滑拉出了删除重命名按钮，然后跳到另一个页面，再返回，按钮还保持被拉出的状态，理想是，跳到另一个页面的时候，按钮全部恢复默认（没拉出）的状态
解决：在onShow设置全部item.isTouchMove = false;

5.
bug，detail里，消费了啥，备注的聚焦问题，只有点击输入框的左侧才会有光标闪烁
修复：
    原来：
      <view class="weui-cell weui-cell_input">
        <input name="title" focus='{{isfocus}}' value='{{subtitle}}' />
      </view>
    改成
    <input class="weui-cell weui-cell_input" name="title" focus='{{isfocus}}' value='{{subtitle}}' />
    原来的input区域只有一小块，修改后，整个单元格都是input区域

6.
如何将 handbook > index页面计算好的 Object 数据
传入到 handbook > charts里，并显示出来

-- handbook > index.js
   // 跳转到图标页面，携带sumByType和sum数据
   goToChartsPage: function () {
     wx.navigateTo({
       url: '../charts/charts?sumByType=' + JSON.stringify(this.data.sumByType) + '&sum=' + this.data.sum
     });
   },

-- handbook > charts.js
  // 获取并更新总 sum 和导航标题
  onLoad: function (options) {
    var sum = options.sum; // 解析传递的 sum 参数
    // 获取上一个页面的导航标题
    var previousPageTitle = wx.getStorageSync('pageTitle');
    // 设置当前页面的导航栏标题为上一个页面的导航标题
    wx.setNavigationBarTitle({
      title: previousPageTitle,
    });
    this.setData({
      sum: sum,
      title:previousPageTitle
    });
  },
   
  // 页面显示时调用
  onShow: function () {
    // 从当前页面的参数中提取 sumByType 数据
    // 1-获取当前页面栈，包含了所有当前页面的数组
    var pages = getCurrentPages();
    // 2-获取了当前页面栈中最后一个页面的实例，即当前页面的实例
    var currentPage = pages[pages.length - 1];
    // 3-将传递过来的 JSON 字符串 sumByType 解析为 JavaScript 对象
    var sumByType = JSON.parse(currentPage.options.sumByType);
    console.log('charts页面接收到的的sumByType:', sumByType);

    this.setData({
      sumByType: sumByType,
      typelist: typelist
    });

    // 将 sumByType （对象，键是消费类型的ID，值是消费类型标题和总金额）转换为与 dataList 相同的结构（数组，包括消费类型的ID、标题、总金额和背景颜色），并存入 dataList
    var dataList = [];
    var colors = this.data.colors;
    var colorIndex = 0;
    for (var key in sumByType) {
      // 判断对象 sumByType 是否具有名为 key 的属性
      if (sumByType.hasOwnProperty(key)) {
        var typeid = parseInt(key); // 将 typeid 转换为整数
        var title = sumByType[key].title; // 获取消费类型名
        var value = sumByType[key].amount; // 获取消费类型总金额
        // 将数据添加到 dataList 中
        dataList.push({
          typeid: typeid,
          title: title, // 将消费类型名作为标题
          value: value, // 将消费总金额作为值
          background: colors[colorIndex] // 使用预定义的颜色
        });
        colorIndex = (colorIndex + 1) % colors.length; // 超出后取余
      }
    }
    console.log('将sumbytype转换后存入dataList', dataList)
    this.setData({
      dataList: dataList
    });
    // 绘制饼状图
    this.measureCanvas();
  },

charts页面接收到的的sumByType: 
111: {title: "购物", amount: 220}
222: {title: "餐饮", amount: 99}
333: {title: "交通", amount: 44}
444: {title: "住宿", amount: 44}
555: {title: "玩乐", amount: 132}
666: {title: "其他", amount: 88}
__proto__: Object

将sumbytype转换后存入dataList 
0: {typeid: 111, title: "购物", value: 220, background: "#ADD8E6"}
1: {typeid: 222, title: "餐饮", value: 99, background: "#EEB4B4"}
2: {typeid: 333, title: "交通", value: 44, background: "#B89AF3"}
3: {typeid: 444, title: "住宿", value: 44, background: "#A3D586"}
4: {typeid: 555, title: "玩乐", value: 132, background: "#FACA6A"}
5: {typeid: 666, title: "其他", value: 88, background: "#ACA8A8"}
length: 6
nv_length: (...)
__proto__: Array(0)


7.
wx.setStorageSync('app.globalData.typelist', aaa)
将数据 aaa 存储在本地缓存中，以键名 'app.globalData.typelist' 作为索引
这个键名是用单引号括起来的，表示它是一个字符串
下次需要访问这个数据时，可以通过键名 'app.globalData.typelist' 来从本地缓存中取出数据

8.史上最难:删除消费类型后该类型下的所有消费数据全部删除
最开始typelist各个消费类型没有设置唯一的id值，全靠index索引显示
因为我是一旦修改了消费类型，那么全局的app.global.typelist也会实时更新
所以前期还是比较丝滑的
但是在功能：删除消费类型后该类型下的所有消费数据全部删除
出现后，一切都变了
删除该消费类型后，本来应该被删除的消费记录不仅没有被删除，他们的消费类型还往后顺延错位了
尝试了各种办法，比如将要删除的消费数据的消费类型设置为-1；比如var一个新数组，
用过滤filter保存非该消费类型的其他数据，然后将这个新数组覆盖本地数组
但是都因为我是按照索引的，仍然会错位
于是只能给每个消费类型设置唯一的id，刚开始还想了会随机数什么的，后来发现直接用时间戳
会方便许多
解决完每个消费类型的id值唯一的问题后，相应的所有数据也要全部修改
学到了：有些东西可以用index，比如删除的只是当前列表项的数据，而不会牵扯到其他数据；
有些东西得用id，id可以用时间戳

9.相同日期的消费记录，只显示一次日期
handbook > index.wxml
<view wx:if="{{item.showDate}}">{{item.date}}</view> 
表示在 item.showDate 的值为 true 时显示当前记录的日期 item.date，
item.showDate 的值为 false 时隐藏当前记录的日期

handbook > index.js
     // 判断该日期是否与前一个日期相同
     sublist.forEach(function (item, index) {
       // 第一条数据默认与上一条数据日期不同
       if (index === 0) {
         item.showDate = true; // true显示日期
       } else {
         item.showDate = item.date !== sublist[index - 1].date;
        //  如果当前记录的日期与上一条记录的日期不同，则item.showDate=true
       }
     });

10.修改了setting页面的消费类型名，并同时更新了全局的app.globalData.typelist里的typetitle，detail和charts页面的typetitle都因为更新了全局而也自动更新了。但是已提交的消费记录里的typetitle并没有更新
原因：消费记录sublist的typetitle没有更新
解决办法：
     // ----更新 sublist 中的 typetitle
     // （重命名消费类型名，此页面已有的消费记录的消费类型名也要同时修改）
     var typelist = app.globalData.typelist;
     sublist.forEach(function (item) {
       var typeid = item.typeid;
       var type = typelist.find(function (type) {
         return type.typeid == typeid; // 这里不要用 ===
       });
       if (type) {
         item.typetitle = type.typetitle;
       }
     });
 find()用来查找数组中满足条件的第一个元素
 function(type) 定义了一个匿名函数，它接受一个参数 type。在函数体内部，可以使用这个参数来表示数组中的每个元素
 在 typelist 数组中查找第一个满足 type.typeid === typeid 条件的元素，并将其赋值给变量 type

11.为什么账本重命名后，该账本下的数据全没了
寻找原因：在首页index.js用控制台输出rawlist[index]（该账本的数据），发现在该账本新增消费记录后，首页的rawlist[index]并没有更新
原因：首页index.js下，我将var rawlist = wx.getStorageSync('cashflow') || [];放在最顶上，声明为全局的了，导致下面的数据用的都是旧数据，而没有更新
解决办法：每次要调用rawlist时就重新声明var rawlist = wx.getStorageSync('cashflow') || [];

12.charts页面
当消费金额过大时，画面会崩溃，因为数值，百分比位置是固定的，如果数值过大，会于百分比重叠
解决办法：
1.数值宽度，小于50，固定百分比位置=标注方块的x坐标+150间距
2.数值宽度，超过50，则百分比位置=标注方块的x坐标+数值宽度+30间距，使百分比始终位于数值右侧
但是又有新问题，数值过过过大，超出屏幕宽度，又会全部挤在一起
3.想到，超过某个金额，则换行，不过由于全部的标注都是在js写的，而不是在wxml，没有盒子，所以比较困难
新的解决办法：
金额>百万，显示xxx百万，并保留两位小数
金额>亿，显示科学计数法，并保留两位小数
并将所有的百分比都固定位置，因为所有数值宽度都不会太大而于百分比重叠
 // -----绘制数值
      // 数值的起始位置
      var valueTextX = startX + 80;
      var bigValue = dataList[i].value; // 保存原始值
      if (bigValue >= 100000000) { // 超过亿，转换成数字类型，用科学计数法，小数点保留后两位
        bigValue = parseFloat(bigValue).toExponential(2);
        ctxPie.fillText(bigValue + "元", valueTextX, startY + 15);
      } else if (bigValue >= 1000000) { // 超过百万
        bigValue = (bigValue / 1000000).toFixed(2);
        txPie.fillText(bigValue + '百万', valueTextX, startY + 15);
      } else {
        ctxPie.fillText(dataList[i].value + "元", valueTextX, startY + 15);
      }
注意不能直接修改dataList[i].value，而要用bigVaule副本保存，因为超百万和亿，会对value进行处理，如果直接修改原本数据，则会导致百分比计算错误；且切换图标后，饼状图可能无法显示

13.不像12.一样把标注写在js里,而是写在wxml，变成盒子，这样果然简单多了
--实现:点击标注内容，对应扇形区域放大
绑定handleLegendClick点击事件监听,根据索引重绘饼图
  // 标注点击事件处理函数
  handleLegendClick: function (e) {
    // 获取点击的标注索引
    var index = e.currentTarget.dataset.index;
    // 获取上一次点击的索引
    var lastClickedIndex = this.data.lastClickedIndex;
    // 判断当前点击的标注是否与上次点击的标注相同
    if (lastClickedIndex === index) {
      // 如果相同，则重置 lastClickedIndex 为-1，表示没有扇形被选中
      index = -1;
    }
    // 更新状态中的 lastClickedIndex
    this.setData({
      lastClickedIndex: index,
    });
    // 重新绘制饼状图
    this.drawPie();
  },

实现--点击扇形区域,标注变大
设置动态属性,isTotalPieChart选择"当月消费"或"总账消费";
lastClickedIndex === index设置选中的标注变大变色
 <!-- 标注:小方块 类型名 数值 百分比 -->
  <view class="legend" wx:for="{{isTotalPieChart ? dataList : dataList2}}" wx:key="typeid" bindtap="handleLegendClick" data-index="{{index}}" class="{{lastClickedIndex === index ? 'selected' : ''}}">
    <view class="label">
      <view class="color-box" style="background-color: {{colors[index % colors.length]}}"></view>
      <text> {{item.title}} {{item.percentage}}% </text>
      <text>{{item.value}}元</text>
    </view>
  </view>

14.detail页面消费类型左右滑动
       <!-- 按钮左右滑动 -->
        <scroll-view scroll-x="true" class="scroll-view-container">
          <view class="weui-cell weui-cell_input weui-cell_type">
            <view wx:for="{{typelist}}" wx:key="index">
              <button bindtap="selectType" data-typeid="{{item.typeid}}" class="{{item.selected ? 'selected_button' : ''}}">{{item.typetitle}}</button>
            </view>
          </view>
        </scroll-view>

15.头像压缩处理
background-size属性：
1. `auto`: 默认值。背景图像保持原始尺寸。
2. `<length>`: 指定背景图像的宽度和高度，可以使用像素（px）、百分比（%）、视窗宽度（vw）、视窗高度（vh）等单位。
3. `<percentage>`: 相对于背景容器的百分比。例如，`background-size: 50% 50%;` 表示背景图像宽度和高度均为容器宽度和高度的 50%。
4. `contain`: 背景图像将尽可能地缩放以完全装入背景容器，同时保持图像的纵横比。图像不会被裁剪
5. `cover`: 背景图像会被放置在容器内，并尽可能填充整个容器，同时保持图像的纵横比。图像的某些部分可能会被裁剪掉
6. `initial`: 恢复到默认值。
7. `inherit`: 继承父元素的值。

这些值可以单独使用，也可以组合使用，用空格分隔，类似于 `background-size: 50% auto;` 或 `background-size: 200px 100px;`。

16.handbook > index 点击复制所有消费记录按钮层级覆盖问题
bug,写了此代码后,该页面上所有按钮均无法点击(包括预算那里的左右滑动,点击消费记录,新增按钮,饼图按钮)
  <!-- 复制所有消费记录按钮 -->
  <movable-area class="export-area">
    <movable-view class="export-btn" direction="all" out-of-bounds>点击复制所有消费记录</movable-view>
  </movable-area>
原因:层级覆盖,我将此代码写在了最底部,覆盖了页面上的其他按钮，导致这些按钮无法点击和滑动
解决办法:写在最上面
出现新问题:按钮拖动划过消费记录的时候,被消费记录覆盖了(这个页面实在太丑了)
解决办法:两个都设相同z-index值

17.为什么删除消费类型名后，所有账本名变为空了
寻找原因：发现控制台输出的“删除消费类型前/后的本地存储”里，“后”的直接少了title这个属性，发现是var newAccount = {}里，只写了items的改变，它默认把title踢走了，导致“删除消费类型后的本地存储”里只有items一个属性
解决办法：
 success(res) {
        if (res.confirm) { // 确定删除
          console.log('删除消费类型前的本地存储', rawlist)
          var newRawList = rawlist.map(account => {
            var newAccount = {
              title: account.title, // 加上这一行，可以保留原始标题
              items: account.items.filter(expense => {
                var typeid = expense.typeid;
                if (typeid !== deltypeid) {
                  return true;
                } else {
                  console.log('符合删除条件的消费类型id', typeid);
                  return false;
                }
              })
            };
            return newAccount;
          });

18.为了方便数据库更新，只在主首页拉取了和数据库的连接
这意味着所有的本地操作将先保存在本地缓存rawlist中
再回到主首页，才能将rawlist的数据上传更新到数据库

19.云函数的调用失败很可能是因为入口文件写错了
可以对比调用成功的文件，他们怎么写的

20.在数据库中写入数据，比如新建一个账号，但是前端页面登录显示没有该账号
解决办法1：把该数据库集合的权限改成所有用户可读
解决办法2：使用云函数（云函数的权限就是大）